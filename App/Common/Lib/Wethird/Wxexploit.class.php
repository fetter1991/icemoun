<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2018/2/25
 * Time: 17:39
 */

namespace Common\Lib\Wethird;
require_once('config.php');
use Common\Lib\Log;
require_once('crypt/wxBizMsgCrypt.php');

class Wxexploit{

    protected $component_access_token;
    protected $component_appid;

    public function __construct()
    {
        $this->component_appid = trim(AppID);
        $this->component_appsecret = trim(AppSecret);
        $this->getComponentAccessToken();
    }

    //获取component_access_token
    public function getCAT($refresh=0){
        if($refresh == 1){
            $this->getComponentAccessToken($refresh);
        }
        return $this->component_access_token;
    }

    //赋值component_access_token
    private function getComponentAccessToken($refresh=0) {
        $redis = new \Redis();
        $redis->connect(C('REDIS.IP'),C('REDIS.PORT'),C('REDIS.TIMEOUT'));
        $redis->auth(C('REDIS.PWD'));
        $redis->select(11);
        $component_verify_ticket = $redis->get('{wechat}:component:verify-ticket');
       
        
        $this->component_access_token = $redis->get('{wechat}:component:access-token');
        $expires_time = 0;
        if($refresh == 1){
            $expires_time = $redis->ttl('{wechat}:component:access-token');
        }
        
        //更新component_access_token
        if (empty($this->component_access_token) || ($refresh ==1 && $expires_time < 6700)){
            $component = array('component_appid' => $this->component_appid,'component_appsecret' => $this->component_appsecret,'component_verify_ticket' =>$component_verify_ticket);
            $data = urldecode(json_encode($component));
            
            $url = "https://api.weixin.qq.com/cgi-bin/component/api_component_token";
            $res = $this->http_request($url, $data);

            $result = json_decode($res, true);
            $this->component_access_token = $result["component_access_token"];
            if(!empty($this->component_access_token)){
                $redis->setex('{wechat}:component:access-token',7000,$this->component_access_token);
            }
        }
        $redis->close();
    }

    //认证
    public function auth()
    {
        $signature = $_GET['signature'];
        $timestamp = $_GET['timestamp'];
        $nonce = $_GET['nonce'];
        $encrypt_type = $_GET['encrypt_type'];
        $msg_signature = $_GET['msg_signature'];
        $postStr = file_get_contents("php://input");


        //解密
        $pc = new \WXBizMsgCrypt(Token, EncodingAESKey, AppID);
        $log = new Log(array('log_file_path'=>'./log/component/'));
        $log->log('0',print_r($postStr,true),date('Y-m-d H:i:s'));

        $decryptMsg = "";  //解密后的明文
        $errCode = $pc->decryptMsg($msg_signature, $timestamp, $nonce, $postStr, $decryptMsg);
        $postStr = $decryptMsg;

        $log->log('0',$postStr,date('Y-m-d H:i:s'));
        $postObj = simplexml_load_string($postStr, 'SimpleXMLElement', LIBXML_NOCDATA);
        $INFO_TYPE = trim($postObj->InfoType);

        //消息类型分离
        switch ($INFO_TYPE) {
            case "component_verify_ticket":
                $component_verify_ticket = $postObj->ComponentVerifyTicket;
                //更新component_verify_ticket到系统中
                if(!empty($component_verify_ticket)){
                    $redis = new \Redis();
                    $redis->connect(C('REDIS.IP'),C('REDIS.PORT'),C('REDIS.TIMEOUT'));
                    $redis->auth(C('REDIS.PWD'));
                    $redis->select(11);
                    $redis->set('{wechat}:component:verify-ticket',strval($component_verify_ticket));
//                    $redis->set('component:verify_ticket',strval($component_verify_ticket));
                    $redis->close();
                }
    
                $result = "success";
                break;
            case "authorized":
            case "unauthorized"://
                $result = "success";
                $app_id = trim($postObj->AuthorizerAppid);
                if (!empty($app_id)) {
                    M('channel')->where(array('appid'=>$app_id))->save(array('authorized'=>0));
                }
                break;
            case "updateauthorized":
                $result = "success";
                break;
            default:
                $result = "unknown msg type: " . $INFO_TYPE;
                break;
        }
        echo $result;

    }

    //授权登录
    public function login()
    {
        if (!isset($_GET["auth_code"])){
            $result = $this->get_pre_auth_code();

            $pre_auth_code = $result["pre_auth_code"];
            $redirect_uri = 'http://'.$_SERVER['HTTP_HOST'].$_SERVER['REQUEST_URI'];
            $jumpurl = $this->component_login_page($pre_auth_code, $redirect_uri);
            return $jumpurl;
        }else{
            $info['authorization'] = $this->query_authorization($_GET["auth_code"]);
            $authorizer_appid = $info['authorization']["authorization_info"]["authorizer_appid"];
            $info['authorizer_info'] = $this->get_authorizer_info($authorizer_appid);
            return $info;
        }
    }

    //授权页网址
    public function component_login_page($pre_auth_code, $redirect_uri)
    {
        $url = "https://mp.weixin.qq.com/cgi-bin/componentloginpage?component_appid=".$this->component_appid."&pre_auth_code=".$pre_auth_code."&redirect_uri=".$redirect_uri;
        return $url;
    }

    //3、获取预授权码pre_auth_code
    public function get_pre_auth_code()
    {
        $component = array('component_appid' => $this->component_appid);
        $data = urldecode(json_encode($component));
        $url = "https://api.weixin.qq.com/cgi-bin/component/api_create_preauthcode?component_access_token=".$this->component_access_token;
        $res = $this->http_request($url, $data);
        return json_decode($res, true);
    }

    //4、使用授权码换取公众号的接口调用凭据和授权信息
    public function query_authorization($auth_code)
    {
        $component = array('component_appid' => $this->component_appid,
            'authorization_code' => $auth_code
        );
        $data = urldecode(json_encode($component));
        $url = "https://api.weixin.qq.com/cgi-bin/component/api_query_auth?component_access_token=".$this->component_access_token;
        $res = $this->http_request($url, $data);
        return json_decode($res, true);
    }

    //6、获取授权方的公众号帐号基本信息
    public function get_authorizer_info($authorizer_appid)
    {
        $component = array('component_appid' => $this->component_appid,
            'authorizer_appid' => $authorizer_appid
        );
        $data = urldecode(json_encode($component));
        $url = "https://api.weixin.qq.com/cgi-bin/component/api_get_authorizer_info?component_access_token=".$this->component_access_token;
        $res = $this->http_request($url, $data);
        return json_decode($res, true);
    }

    //代发客服接口消息
    public function send_custom_message($touser, $type, $data, $authorizer_access_token)
    {
        $msg = array('touser' =>$touser);
        $msg['msgtype'] = $type;
        switch($type)
        {
            case 'text':
                $msg[$type]    = array('content'=>urlencode($data));
                break;
            case 'news':
                $data2 = array();
                foreach ($data as &$item) {
                    $item2 = array();
                    foreach ($item as $k => $v) {
                        $item2[strtolower($k)] = urlencode($v);
                    }
                    $data2[] = $item2;
                }
                $msg[$type]    = array('articles'=>$data2);
                break;
            case 'music':
            case 'image':
            case 'voice':
            case 'video':
                $msg[$type]    = $data;
                break;
            default:
                $msg['text'] = array('content'=>urlencode("不支持的消息类型 ".$type));
                break;
        }
        $url = "https://api.weixin.qq.com/cgi-bin/message/custom/send?access_token=".$authorizer_access_token;
        return $this->http_request($url, urldecode(json_encode($msg)));
    }

    //HTTP请求（支持HTTP/HTTPS，支持GET/POST）
    protected function http_request($url, $data = null)
    {
        $curl = curl_init();
        curl_setopt($curl, CURLOPT_URL, $url);
        curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, FALSE);
        curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, FALSE);
        if (!empty($data)){
            curl_setopt($curl, CURLOPT_POST, 1);
            curl_setopt($curl, CURLOPT_POSTFIELDS, $data);
        }
        curl_setopt($curl, CURLOPT_RETURNTRANSFER, TRUE);
        $output = curl_exec($curl);
        curl_close($curl);
        // var_dump($output);
        return $output;
    }
}